"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _queryString = _interopRequireDefault(require("query-string"));

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _icons = require("@sanity/icons");

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

var _ui = require("@sanity/ui");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _components = require("@sanity/base/components");

var _localState = require("../util/localState");

var _parseApiQueryString = _interopRequireDefault(require("../util/parseApiQueryString"));

var _tryParseParams = _interopRequireDefault(require("../util/tryParseParams"));

var _encodeQueryString = _interopRequireDefault(require("../util/encodeQueryString"));

var _apiVersions = require("../apiVersions");

var _resizeObserver = require("../util/resizeObserver");

var _DelayedSpinner = _interopRequireDefault(require("./DelayedSpinner"));

var _QueryEditor = _interopRequireDefault(require("./QueryEditor"));

var _ParamsEditor = _interopRequireDefault(require("./ParamsEditor"));

var _ResultView = _interopRequireDefault(require("./ResultView"));

var _NoResultsDialog = _interopRequireDefault(require("./NoResultsDialog"));

var _QueryErrorDialog = _interopRequireDefault(require("./QueryErrorDialog"));

var _VisionGui = require("./VisionGui.styled");

require("codemirror/lib/codemirror.css?raw");

require("codemirror/theme/material.css?raw");

require("codemirror/addon/hint/show-hint.css?raw");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function nodeContains(node, other) {
  if (!node || !other) {
    return false;
  } // eslint-disable-next-line no-bitwise


  return node === other || !!(node.compareDocumentPosition(other) & 16);
}
/* eslint-enable import/no-unassigned-import, import/no-unresolved */


var sanityUrl = /\.api\.sanity\.io\/(vx|v1|v\d{4}-\d\d-\d\d)\/.*?(?:query|listen)\/(.*?)\?(.*)/;

var isRunHotkey = event => (0, _isHotkey.default)('ctrl+enter', event) || (0, _isHotkey.default)('mod+enter', event);

var handleCopyUrl = () => {
  var emailLink = document.querySelector('#vision-query-url');
  emailLink.select();

  try {
    document.execCommand('copy');
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error('Unable to copy to clipboard :(');
  }
};

function calculatePaneSizeOptions(rootHeight) {
  return {
    defaultSize: rootHeight / 2,
    size: rootHeight > 550 ? undefined : rootHeight * 0.4,
    allowResize: rootHeight > 550,
    minSize: Math.min(170, Math.max(170, rootHeight / 2)),
    maxSize: rootHeight > 650 ? rootHeight * 0.7 : rootHeight * 0.6
  };
}

class VisionGui extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    var lastQuery = (0, _localState.getState)('lastQuery');
    var lastParams = (0, _localState.getState)('lastParams');
    var firstDataset = this.props.datasets[0] && this.props.datasets[0].name;
    var defaultDataset = _client.default.config().dataset || firstDataset;
    var defaultApiVersion = "v".concat(_client.default.config().apiVersion || '1');
    var dataset = (0, _localState.getState)('dataset', defaultDataset);
    var apiVersion = (0, _localState.getState)('apiVersion', defaultApiVersion);

    if (!this.props.datasets.some(_ref => {
      var name = _ref.name;
      return name === dataset;
    })) {
      dataset = defaultDataset;
    }

    if (!_apiVersions.apiVersions.includes(apiVersion)) {
      apiVersion = _apiVersions.apiVersions[0];
    }

    this._visionRoot = /*#__PURE__*/_react.default.createRef();
    this._resizeListener = /*#__PURE__*/_react.default.createRef();
    this._queryEditorContainer = /*#__PURE__*/_react.default.createRef();
    this._paramsEditorContainer = /*#__PURE__*/_react.default.createRef();
    this.client = _client.default.withConfig({
      apiVersion,
      dataset
    });
    this.subscribers = {}; // Initial root height without header

    var bodyHeight = document.body.getBoundingClientRect().height - 60;
    this.state = {
      paramValidationMarkers: [],
      validParams: true,
      query: lastQuery,
      params: lastParams && (0, _tryParseParams.default)(lastParams),
      rawParams: lastParams,
      queryInProgress: false,
      paneSizeOptions: calculatePaneSizeOptions(bodyHeight),
      dataset,
      apiVersion
    };
    this.handleChangeDataset = this.handleChangeDataset.bind(this);
    this.handleChangeApiVersion = this.handleChangeApiVersion.bind(this);
    this.handleCustomApiVersionChange = this.handleCustomApiVersionChange.bind(this);
    this.handleListenExecution = this.handleListenExecution.bind(this);
    this.handleListenerMutation = this.handleListenerMutation.bind(this);
    this.handleQueryExecution = this.handleQueryExecution.bind(this);
    this.handleQueryChange = this.handleQueryChange.bind(this);
    this.handleParamsChange = this.handleParamsChange.bind(this);
    this.handlePaste = this.handlePaste.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleResize = this.handleResize.bind(this);
  }

  componentDidMount() {
    window.document.addEventListener('paste', this.handlePaste);
    window.document.addEventListener('keydown', this.handleKeyDown);
    this.handleResizeListen();
  }

  componentWillUnmount() {
    this.cancelQuery();
    this.cancelListener();
    this.cancelEventListener();
    this.cancelResizeListener();
  }

  handleResizeListen() {
    this._resizeListener.current = new _resizeObserver.ResizeObserver(this.handleResize);

    this._resizeListener.current.observe(this._visionRoot.current);
  }

  handleResize(entries) {
    var entry = entries === null || entries === void 0 ? void 0 : entries[0];
    this.setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
      paneSizeOptions: calculatePaneSizeOptions(entry.contentRect.height)
    }));
  }

  cancelResizeListener() {
    if (this._resizeListener.current) {
      this._resizeListener.current.disconnect();
    }
  }

  handlePaste(evt) {
    var data = evt.clipboardData.getData('text/plain');
    var match = data.match(sanityUrl);

    if (!match) {
      return;
    }

    var _match = _slicedToArray(match, 4),
        apiVersion = _match[1],
        dataset = _match[2],
        urlQuery = _match[3];

    var qs = _queryString.default.parse(urlQuery);

    var parts;

    try {
      parts = (0, _parseApiQueryString.default)(qs);
    } catch (err) {
      console.warn('Error while trying to parse API URL: ', err.message); // eslint-disable-line no-console

      return; // Give up on error
    }

    if (this.state.data !== dataset) {
      (0, _localState.storeState)('dataset', dataset);
    }

    if (this.state.apiVersion !== apiVersion) {
      (0, _localState.storeState)('apiVersion', apiVersion);
    }

    evt.preventDefault();
    this.client.config({
      dataset,
      apiVersion
    });
    this.setState({
      dataset,
      apiVersion,
      query: parts.query,
      params: parts.params,
      rawParams: JSON.stringify(parts.params, null, 2)
    }, () => {
      this.handleQueryExecution();
    });
  }

  cancelQuery() {
    if (!this.subscribers.query) {
      return;
    }

    this.subscribers.query.unsubscribe();
    this.subscribers.query = null;
  }

  cancelListener() {
    if (!this.subscribers.listen) {
      return;
    }

    this.subscribers.listen.unsubscribe();
    this.subscribers.listen = null;
  }

  cancelEventListener() {
    window.removeEventListener('keydown', this.handleKeyDown);
  }

  handleChangeDataset(evt) {
    var dataset = evt.target.value;
    (0, _localState.storeState)('dataset', dataset);
    this.setState({
      dataset
    });
    this.client.config({
      dataset
    });
    this.handleQueryExecution();
  }

  handleChangeApiVersion(evt) {
    var apiVersion = evt.target.value;

    if (apiVersion === 'other') {
      this.setState({
        customApiVersion: true
      });
      return;
    }

    (0, _localState.storeState)('apiVersion', apiVersion);
    this.setState({
      apiVersion,
      customApiVersion: undefined
    });
    this.client.config({
      apiVersion
    });
    this.handleQueryExecution();
  }

  handleCustomApiVersionChange(evt) {
    var customApiVersion = evt.target.value;
    var parseableApiVersion = customApiVersion.replace(/^v/, '').trim().match(/^\d{4}-\d{2}-\d{2}$/);
    var isValidApiVersion = !isNaN(Date.parse(parseableApiVersion));
    this.setState(prevState => ({
      apiVersion: isValidApiVersion ? customApiVersion : prevState.apiVersion,
      customApiVersion: customApiVersion || true,
      isValidApiVersion
    }), () => {
      if (!this.state.isValidApiVersion) {
        return;
      }

      this.client.config({
        apiVersion: this.state.customApiVersion
      });
    });
  }

  handleListenerMutation(mut) {
    // eslint-disable-next-line react/no-access-state-in-setstate
    var listenMutations = [mut].concat(this.state.listenMutations);

    if (listenMutations.length > 50) {
      listenMutations.pop();
    }

    this.setState({
      listenMutations
    });
  }

  handleKeyDown(event) {
    var validParams = this.state.validParams;
    var isWithinRoot = this._visionRoot.current && nodeContains(this._visionRoot.current, event.target);

    if (isRunHotkey(event) && isWithinRoot && validParams) {
      this.handleQueryExecution();
    }
  }

  handleListenExecution() {
    var _this$state = this.state,
        query = _this$state.query,
        params = _this$state.params,
        rawParams = _this$state.rawParams,
        listenInProgress = _this$state.listenInProgress;

    if (listenInProgress) {
      this.cancelListener();
      this.setState({
        listenInProgress: false
      });
      return;
    }

    var paramsError = params instanceof Error && params;
    var url = this.client.getUrl(this.client.getDataUrl('listen', (0, _encodeQueryString.default)(query, params)));
    (0, _localState.storeState)('lastQuery', query);
    (0, _localState.storeState)('lastParams', rawParams);
    this.cancelQuery();
    this.setState({
      url,
      listenMutations: [],
      queryInProgress: false,
      result: undefined,
      listenInProgress: !paramsError && Boolean(query),
      error: paramsError || undefined,
      // result: undefined,
      queryTime: null,
      e2eTime: null
    });

    if (!query || paramsError) {
      return;
    }

    this.subscribers.listen = this.client.listen(query, params, {}).subscribe({
      next: this.handleListenerMutation,
      error: _error => this.setState({
        error: _error,
        query,
        listenInProgress: false
      })
    });
  }

  handleQueryExecution() {
    var _this$state2 = this.state,
        query = _this$state2.query,
        params = _this$state2.params,
        rawParams = _this$state2.rawParams;
    var paramsError = params instanceof Error && params;
    (0, _localState.storeState)('lastQuery', query);
    (0, _localState.storeState)('lastParams', rawParams);
    this.cancelListener();
    this.setState({
      queryInProgress: !paramsError && Boolean(query),
      listenInProgress: false,
      listenMutations: [],
      error: paramsError || undefined,
      result: undefined,
      queryTime: null,
      e2eTime: null
    });

    if (!query || paramsError) {
      return;
    }

    var url = this.client.getUrl(this.client.getDataUrl('query', (0, _encodeQueryString.default)(query, params)));
    this.setState({
      url
    });
    var queryStart = Date.now();
    this.subscribers.query = this.client.observable.fetch(query, params, {
      filterResponse: false,
      tag: 'vision'
    }).subscribe({
      next: res => {
        this.setState({
          executedQuery: query,
          queryTime: res.ms,
          e2eTime: Date.now() - queryStart,
          result: res.result,
          queryInProgress: false,
          error: null
        });
      },
      error: _error2 => this.setState({
        error: _error2,
        query,
        queryInProgress: false
      })
    });
  }

  handleQueryChange(data) {
    this.setState({
      query: data.query
    });
  }

  handleParamsChange(data) {
    var raw = data.raw,
        parsed = data.parsed,
        valid = data.valid,
        validationError = data.validationError;
    var paramValidationMarkers = valid ? [] : [{
      type: 'validation',
      level: 'error',
      item: {
        message: validationError || 'Invalid JSON'
      }
    }];
    this.setState({
      rawParams: raw,
      params: parsed,
      validParams: valid,
      paramValidationMarkers
    });
  }

  render() {
    var datasets = this.props.datasets;
    var _this$state3 = this.state,
        error = _this$state3.error,
        result = _this$state3.result,
        url = _this$state3.url,
        query = _this$state3.query,
        queryInProgress = _this$state3.queryInProgress,
        executedQuery = _this$state3.executedQuery,
        listenInProgress = _this$state3.listenInProgress,
        paneSizeOptions = _this$state3.paneSizeOptions,
        queryTime = _this$state3.queryTime,
        e2eTime = _this$state3.e2eTime,
        listenMutations = _this$state3.listenMutations,
        apiVersion = _this$state3.apiVersion,
        dataset = _